一、
％-formatting

>>> name  =  “Eric” 
>>> “你好，％s 。”  ％ 名称


>>> name  =  “Eric” 
>>> 年龄 =  74 
>>> “你好，％s 。你是％s 。”  ％ （姓名， 年龄）


str.format()  是％格式化的改进。它使用普通函数调用语法，并且可以通过__format__()对

象转换为字符串的方法进行扩展。
>>> “你好，{} 。你是{} 。” 。格式（姓名， 年龄）
'你好，埃里克。你今年74岁。


代码使用str.format()比使用％-formatting的代码更容易阅读，但str.format()在处理多个

参数和更长的字符串时仍然可能非常冗长



二、
functools模块用于高阶函数：作用于或返回其他函数的函数。通常，任何可调用对象都可以

被视为用于此模块的功能。
1.functools.cmp_to_key（func ）将旧式比较功能转换为关键功能

2.functools.lru_cache（maxsize = 128，typed = False ）
Decorator用一个memoizing callable来包装一个函数，它可以节省 maxsize最近的调用。当

使用相同的参数定期调用昂贵的或I / O绑定函数时，它可以节省时间。

3.functools.total_ordering
给定一个定义一个或多个丰富的比较排序方法的类，这个类装饰器提供其余的。这简化了指定

所有可能的丰富比较操作所需的工作：
这个类必须定义之一__lt__()，__le__()， __gt__()，或__ge__()。此外，该课程应该提供

一种__eq__()方法。

4.functools.partial（func，* args，**关键字）
返回一个新partial对象，该对象在调用时的行为类似于 使用位置参数args和keyword 

arguments 关键字调用的func。如果为调用提供了更多参数，则将它们附加到args。如果提供

了其他关键字参数，则它们会扩展和覆盖关键字

5.class functools.partialmethod（func，* args，** keywords ）
返回一个新的partialmethod描述符，其行为类似于partial它被设计为用作方法定义而不是

可直接调用。
func必须是描述符或可调用的（与正常函数一样的对象都作为描述符处理）。

6.class functools.partialmethod（func，* args，** keywords ）
返回一个新的partialmethod描述符，其行为类似于partial它被设计为用作方法定义而不是

可直接调用。
func必须是描述符或可调用的（与正常函数一样的对象都作为描述符处理）。

7.functools.reduce（function，iterable [，initializer ] ）
应用功能的两个参数来累计的项目序列，从左至右，这样的顺序，以减少单个值


8.functools.singledispatch将函数转换为单调度 泛型函数。


9.functools.update_wrapper（包装，包装，分配= WRAPPER_ASSIGNMENTS，更新= 

WRAPPER_UPDATES ）
更新包装函数以使其看起来像包装函数。可选参数是元组，用于指定原始函数的哪些属性直接

分配给包装函数上的匹配属性，以及使用原始函数中的相应属性更新包装函数的哪些属性。这

些参数的默认值是模块级的常量WRAPPER_ASSIGNMENTS（其中分配给包装函数的__module__，

__name__，__qualname__，__annotations__ 和__doc__，文档字符串）和

WRAPPER_UPDATES（其更新的包装函数的__dict__，即实例字典）。


10.functools.wraps（包装，已分配= WRAPPER_ASSIGNMENTS，更新= WRAPPER_UPDATES ）
这是一个便利函数，用于update_wrapper()在定义包装函数时作为函数装饰器调用

11.artial对象是由...创建的可调用对象partial()。它们有三个只读属性：

partial.func
可调用的对象或函数。partial对象的调用将转发到func新的参数和关键字。

partial.args
最左边的位置参数将添加到提供给partial对象调用的位置参数之前。

partial.keywords
partial调用对象时将提供的关键字参数。

partial对象就像function对象，因为它们是可调用的，弱引用的，并且可以具有属性。有一

些重要的区别。例如，不会自动创建__name__和__doc__属性。此外，partial类中定义的对

象的行为类似于静态方法，并且在实例属性查找期间不会转换为绑定方法。


三、
>>> a  =  4 
>>> b  =  3 
>>> + a 
4 
>>> - b 
-3 
>>> a  +  b 
7 
>>> a  -  b 
1 
>>> a  *  b 
12 
>>> a  /  b 
1.3333333333333333 
>>> a  ％ b 
1 
>>> a  **  b 
64



>>> 10  /  5 
2.0 
>>> 类型（10  /  5 ）
<类'浮动'>



当floor division（//）的结果为正时，就好像截断了小数部分，只留下整数部分。当结果为

负时，结果向下舍入到下一个最小（更大的负）整数
>>> 10  /  4 
2.5 
>>> 10  //  4 
2 
>>> 10  //  - 4 
-3 
>>> - 10  //  4 
-3 
>>> - 10  //  - 4 
2



>>> a  =  10 
>>> b  =  20 
>>> a  ==  b 
False 
>>> a  ！=  b 
真
>>> a  <=  b 
真
>>> a  > =  b 
假

>>> a  =  30 
>>> b  =  30 
>>> a  ==  b 
真
>>> a  <=  b 
真
>>> a  > =  b 
真


abs()返回绝对值。如果两个数字之间的差值的绝对值小于指定的容差，则它们彼此足够接近

以被认为是相等的。



在布尔上下文中计算时，以下所有内容都被视为false：
1.布尔值 False
2.任何值，该值在数值上是零（0，0.0，0.0+0.0j）
3.一个空字符串
4.内置复合数据类型的对象为空（见下文）
5.Python关键字表示的特殊值 None



>>> '0b {：04b} ' 。格式（0b1100  ＆ 0b1010 ）
'0b1000' 
>>> '0b {：04b} ' 。格式（0b1100  |  0b1010 ）
'0b1110' 
>>> '0b {：04b} ' 。格式（0b1100  ^  0b1010 ）
'0b0110' 
>>> '0b {：04b} ' 。格式（0b1100  >>  2 ）
'0b0011' 
>' 。格式（0b0011  <<  2 ）
'0b1100'


